{"name": "Проверка успешного создания заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[@class=\"Order_Buttons__1xGrp\"]/button[text()=\"Заказать\"]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:505:5\nelement.find/</<@chrome://remote/content/marionette/element.sys.mjs:135:16", "trace": "self = <test.TestOrder object at 0x000002349607D4E0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b619014a-a0a7-4bac-84fd-5f20fa57878e\")>\n\n    @allure.title('Проверка успешного создания заказа')\n    @allure.description(\"Переходим на страницу созданя заказа, заполняем все необходимы поля и создаем заказ\")\n    #@pytest.mark.parametrize('order_button', data.order_button)\n    def test_success_order(self, driver):\n        order_page = OrderPageHelper(driver=driver, url=data.BASE_URL)\n        order_page.open_scooter_main_page()\n        order_page.wait_open_page()\n>       order_page.click_order_button()\n\ntest.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\order_page.py:125: in click_order_button\n    return self.driver.find_element(*OrderPageLocators.BUTTON_ORDER).click()\nC:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002349625AA40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: //div[@class=\\\\\"Ord...red/webdriver/Errors.sys.mjs:505:5\\\\nelement.find/</<@chrome://remote/content/marionette/element.sys.mjs:135:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[@class=\"Order_Buttons__1xGrp\"]/button[text()=\"Заказать\"]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:505:5\nE       element.find/</<@chrome://remote/content/marionette/element.sys.mjs:135:16\n\nC:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "description": "Переходим на страницу созданя заказа, заполняем все необходимы поля и создаем заказ", "steps": [{"name": "Открываем главную страницу \"Яндекс Самокат\"", "status": "passed", "start": 1703104571923, "stop": 1703104573847}, {"name": "Ждем загрузку главной страницы", "status": "passed", "start": 1703104573847, "stop": 1703104573866}, {"name": "Нажимаем \"Заказать\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[@class=\"Order_Buttons__1xGrp\"]/button[text()=\"Заказать\"]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:505:5\nelement.find/</<@chrome://remote/content/marionette/element.sys.mjs:135:16\n\n", "trace": "  File \"C:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"F:\\QA\\Япрактикум\\Sprint_6\\pages\\order_page.py\", line 125, in click_order_button\n    return self.driver.find_element(*OrderPageLocators.BUTTON_ORDER).click()\n  File \"C:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 742, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 348, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\uold9\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1703104573866, "stop": 1703104573869}], "start": 1703104571923, "stop": 1703104573895, "uuid": "23619acc-33f2-4bd7-a873-fea67904b3d7", "historyId": "a8b12ec309666ad0c13febb80bd0fb82", "testCaseId": "a8b12ec309666ad0c13febb80bd0fb82", "fullName": "test.TestOrder#test_success_order", "labels": [{"name": "suite", "value": "test"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "DESKTOP-K94CD63"}, {"name": "thread", "value": "17632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test"}]}